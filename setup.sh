#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞
# Usage: ./setup.sh

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo -e "${PURPLE}ü§ñ –ù–ê–°–¢–†–û–ô–ö–ê INNOKENTIY TELEGRAM BOT${NC}"
echo -e "${PURPLE}====================================${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
log_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è..."

# Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
    exit 1
fi
log_success "Docker –Ω–∞–π–¥–µ–Ω: $(docker --version | cut -d' ' -f3)"

# Docker Compose
if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose: https://docs.docker.com/compose/install/"
    exit 1
fi
log_success "Docker Compose –Ω–∞–π–¥–µ–Ω: $(docker-compose --version | cut -d' ' -f3)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ Docker
if ! docker ps &> /dev/null; then
    log_error "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker!"
    echo "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker: sudo usermod -aG docker \$USER"
    echo "–ó–∞—Ç–µ–º –ø–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
    exit 1
fi
log_success "–ü—Ä–∞–≤–∞ Docker –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log_info "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

if [[ ! -f "config.env" ]]; then
    log_info "–°–æ–∑–¥–∞–µ–º config.env –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
    cp config.env.example config.env
    log_warning "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å config.env!"
    
    echo ""
    echo -e "${CYAN}üìã –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:${NC}"
    echo "1. TELEGRAM_BOT_TOKEN - —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather"
    echo "2. SUPABASE_URL - URL –≤–∞—à–µ–≥–æ Supabase –ø—Ä–æ–µ–∫—Ç–∞"
    echo "3. SUPABASE_KEY - –∫–ª—é—á Supabase"
    echo "4. OPENAI_API_KEY - –∫–ª—é—á OpenAI –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"
    echo "5. N8N_*_WEBHOOK_URL - URL –≤–∞—à–∏—Ö N8N –≤–µ–±—Ö—É–∫–æ–≤"
    echo "6. ADMIN_CHAT_ID - ID —á–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.env –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞${NC}"
    echo "–ö–æ–º–∞–Ω–¥–∞: nano config.env"
    exit 1
else
    log_success "config.env –Ω–∞–π–¥–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
source config.env

required_vars=(
    "TELEGRAM_BOT_TOKEN"
    "SUPABASE_URL"
    "SUPABASE_KEY"
    "OPENAI_API_KEY"
    "ADMIN_CHAT_ID"
)

missing_vars=()
for var in "${required_vars[@]}"; do
    if [[ -z "${!var}" ]]; then
        missing_vars+=("$var")
    fi
done

if [[ ${#missing_vars[@]} -gt 0 ]]; then
    log_error "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"
    for var in "${missing_vars[@]}"; do
        echo "  - $var"
    done
    echo ""
    echo "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
    exit 1
fi

log_success "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ N8N –≤–µ–±—Ö—É–∫–æ–≤
webhook_vars=(
    "N8N_NICHE_WEBHOOK_URL"
    "N8N_TOPIC_WEBHOOK_URL"
    "N8N_POST_WEBHOOK_URL"
)

missing_webhooks=()
for var in "${webhook_vars[@]}"; do
    if [[ -z "${!var}" ]]; then
        missing_webhooks+=("$var")
    fi
done

if [[ ${#missing_webhooks[@]} -gt 0 ]]; then
    log_warning "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã N8N –≤–µ–±—Ö—É–∫–∏:"
    for var in "${missing_webhooks[@]}"; do
        echo "  - $var"
    done
    echo ""
    echo "–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π N8N"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ N8N –≤–µ–±—Ö—É–∫–∏ –≤ config.env"
        exit 1
    fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
log_info "üìÅ –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏..."
mkdir -p logs
mkdir -p backups
chmod 755 scripts/*.sh 2>/dev/null || true

# –°–æ–∑–¥–∞–Ω–∏–µ Docker —Å–µ—Ç–∏
log_info "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker —Å–µ—Ç–∏..."
if ! docker network ls | grep -q "services-network"; then
    log_info "–°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å services-network..."
    docker network create services-network
    log_success "–°–µ—Ç—å services-network —Å–æ–∑–¥–∞–Ω–∞"
else
    log_info "–°–µ—Ç—å services-network —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
log_info "üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å–∞–º..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
if curl -s "$SUPABASE_URL/rest/v1/" -H "apikey: $SUPABASE_KEY" > /dev/null 2>&1; then
    log_success "Supabase –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    log_warning "Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI
if curl -s "https://api.openai.com/v1/models" -H "Authorization: Bearer $OPENAI_API_KEY" > /dev/null 2>&1; then
    log_success "OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    log_warning "OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á"
fi

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
echo ""
log_info "üöÄ –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!"
echo ""
echo -e "${CYAN}–í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞:${NC}"
echo "1. –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
echo "2. –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞"
echo "3. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é"
echo ""

read -p "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-3): " -n 1 -r
echo

case $REPLY in
    1)
        log_info "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ..."
        ./scripts/deploy.sh
        ;;
    2)
        log_info "üî® –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑..."
        docker-compose build
        log_success "–û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/deploy.sh"
        ;;
    3)
        log_info "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        ;;
    *)
        log_warning "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é: ./scripts/deploy.sh"
        ;;
esac

# –ü–æ–∫–∞–∑ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
echo ""
echo -e "${PURPLE}üéõÔ∏è –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:${NC}"
echo -e "${CYAN}./scripts/deploy.sh${NC}    - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ/–∑–∞–ø—É—Å–∫"
echo -e "${CYAN}./scripts/status.sh${NC}     - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
echo -e "${CYAN}./scripts/logs.sh${NC}       - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo -e "${CYAN}./scripts/restart.sh${NC}    - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
echo -e "${CYAN}./scripts/stop.sh${NC}       - –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
echo -e "${CYAN}./scripts/backup.sh${NC}     - –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"

echo ""
echo -e "${GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"

if docker-compose ps | grep -q "innokentiy-bot"; then
    echo -e "${GREEN}ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!${NC}"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: ./scripts/status.sh"
else
    echo "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ./scripts/deploy.sh"
fi
