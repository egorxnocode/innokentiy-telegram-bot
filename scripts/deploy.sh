#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞
# Usage: ./scripts/deploy.sh [production|staging]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
ENVIRONMENT=${1:-production}

if [[ "$ENVIRONMENT" != "production" && "$ENVIRONMENT" != "staging" ]]; then
    log_error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: production –∏–ª–∏ staging"
    exit 1
fi

log_info "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: $ENVIRONMENT"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [[ ! -f ".env" ]]; then
    log_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    log_info "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
    log_info "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./scripts/setup-env.sh"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
log_info "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
required_vars=(
    "TELEGRAM_BOT_TOKEN"
    "SUPABASE_KEY"
    "ADMIN_CHAT_ID"
)

optional_vars=(
    "OPENAI_API_KEY"
    "N8N_NICHE_WEBHOOK_URL"
    "N8N_TOPIC_WEBHOOK_URL" 
    "N8N_POST_WEBHOOK_URL"
)

source .env

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
for var in "${required_vars[@]}"; do
    if [[ -z "${!var}" || "${!var}" == "your_"* ]]; then
        log_error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env"
        log_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./scripts/setup-env.sh –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        exit 1
    fi
done

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
for var in "${optional_vars[@]}"; do
    if [[ -z "${!var}" || "${!var}" == "your_"* ]]; then
        log_warning "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)"
    fi
done

log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
log_info "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker —Å–µ—Ç–∏..."
if ! docker network ls | grep -q "services-network"; then
    log_info "–°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å services-network..."
    docker network create services-network
    log_success "–°–µ—Ç—å services-network —Å–æ–∑–¥–∞–Ω–∞"
else
    log_info "–°–µ—Ç—å services-network —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
log_info "üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏..."
mkdir -p logs
chmod 755 logs

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose down --remove-orphans || true

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
log_info "üî® –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑..."
docker-compose build --no-cache

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
log_info "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
log_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞..."
max_attempts=30
attempt=1

while [[ $attempt -le $max_attempts ]]; do
    if curl -s http://localhost:8080/health > /dev/null 2>&1; then
        log_success "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check"
        break
    fi
    
    if [[ $attempt -eq $max_attempts ]]; then
        log_error "–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
        log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs"
        exit 1
    fi
    
    log_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."
    sleep 2
    ((attempt++))
done

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞
log_info "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose ps

# –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤
log_info "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
docker-compose logs --tail=20

log_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
log_info "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: ./scripts/logs.sh"
log_info "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ./scripts/stop.sh"
log_info "–î–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞: ./scripts/restart.sh"
