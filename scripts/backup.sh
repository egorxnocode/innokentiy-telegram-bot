#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–æ–≤
# Usage: ./scripts/backup.sh

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –±—ç–∫–∞–ø–∞ —Å –¥–∞—Ç–æ–π
BACKUP_DATE=$(date +"%Y%m%d_%H%M%S")
BACKUP_DIR="backups"
BACKUP_NAME="innokentiy_bot_backup_$BACKUP_DATE"
BACKUP_PATH="$BACKUP_DIR/$BACKUP_NAME"

log_info "üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é..."

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
mkdir -p "$BACKUP_DIR"

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è –±—ç–∫–∞–ø–∞
mkdir -p "$BACKUP_PATH"

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log_info "üìã –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
if [[ -f "config.env" ]]; then
    cp config.env "$BACKUP_PATH/"
    log_success "config.env —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
else
    log_warning "config.env –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
log_info "üìÅ –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã..."
important_files=(
    "docker-compose.yml"
    "Dockerfile"
    ".dockerignore"
    "requirements.txt"
    "database_schema.sql"
)

for file in "${important_files[@]}"; do
    if [[ -f "$file" ]]; then
        cp "$file" "$BACKUP_PATH/"
        echo "  ‚úÖ $file"
    else
        echo "  ‚ö†Ô∏è $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
log_info "üìã –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏..."
if [[ -d "logs" ]] && [[ "$(ls -A logs)" ]]; then
    cp -r logs "$BACKUP_PATH/"
    log_size=$(du -h "$BACKUP_PATH/logs" | tail -1 | cut -f1)
    log_success "–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã ($log_size)"
else
    log_warning "–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã"
fi

# –≠–∫—Å–ø–æ—Ä—Ç Docker –æ–±—Ä–∞–∑–∞
log_info "üê≥ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Docker –æ–±—Ä–∞–∑..."
if docker images | grep -q "innokentiy-bot_telegram-bot"; then
    docker save innokentiy-bot_telegram-bot > "$BACKUP_PATH/docker_image.tar"
    image_size=$(du -h "$BACKUP_PATH/docker_image.tar" | cut -f1)
    log_success "Docker –æ–±—Ä–∞–∑ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ($image_size)"
else
    log_warning "Docker –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
log_info "üìù –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª..."
cat > "$BACKUP_PATH/backup_info.txt" << EOF
–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è Innokentiy Bot
==============================

–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $(date)
–í–µ—Ä—Å–∏—è: $(git describe --tags 2>/dev/null || echo "unknown")
–ö–æ–º–º–∏—Ç: $(git rev-parse HEAD 2>/dev/null || echo "unknown")

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—ç–∫–∞–ø–∞:
- config.env (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)
- docker-compose.yml (Docker Compose —Ñ–∞–π–ª)
- Dockerfile (Docker –æ–±—Ä–∞–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)
- requirements.txt (Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
- database_schema.sql (—Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
- logs/ (–ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
- docker_image.tar (Docker –æ–±—Ä–∞–∑)

–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:
1. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –≤ –Ω–æ–≤—É—é –ø–∞–ø–∫—É
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ config.env –ø–æ–¥ –Ω–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Docker –æ–±—Ä–∞–∑: docker load < docker_image.tar
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d

–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –∏ N8N –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
log_info "üóúÔ∏è –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤..."
cd "$BACKUP_DIR"
tar -czf "$BACKUP_NAME.tar.gz" "$BACKUP_NAME"
cd ..

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
rm -rf "$BACKUP_PATH"

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ
BACKUP_FILE="$BACKUP_DIR/$BACKUP_NAME.tar.gz"
BACKUP_SIZE=$(du -h "$BACKUP_FILE" | cut -f1)

log_success "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!"
log_info "üìÅ –§–∞–π–ª: $BACKUP_FILE"
log_info "üìä –†–∞–∑–º–µ—Ä: $BACKUP_SIZE"

# –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤
log_info "üìã –í—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:"
ls -lh "$BACKUP_DIR"/*.tar.gz 2>/dev/null || log_warning "–î—Ä—É–≥–∏—Ö –±—ç–∫–∞–ø–æ–≤ –Ω–µ—Ç"

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
echo ""
log_info "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
echo "  - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –±—ç–∫–∞–ø –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ"
echo "  - –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –±—ç–∫–∞–ø—ã"
echo "  - –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
echo "  - –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./scripts/restore.sh $BACKUP_NAME.tar.gz"

# –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
OLD_BACKUPS=$(ls -t "$BACKUP_DIR"/*.tar.gz 2>/dev/null | tail -n +6)
if [[ -n "$OLD_BACKUPS" ]]; then
    log_info "üßπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)..."
    echo "$OLD_BACKUPS" | xargs rm -f
    log_success "–°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª–µ–Ω—ã"
fi
