# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
import logging
import requests
from typing import Optional, Dict, Any
from datetime import datetime
from enum import Enum

from config import (
    TELEGRAM_BOT_TOKEN, ADMIN_CHAT_ID, ENABLE_ADMIN_NOTIFICATIONS, DEBUG
)

logger = logging.getLogger(__name__)

class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    INFO = "üîµ"
    WARNING = "üü°" 
    ERROR = "üî¥"
    CRITICAL = "üö®"

class AdminNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    
    def __init__(self):
        self.enabled = ENABLE_ADMIN_NOTIFICATIONS and TELEGRAM_BOT_TOKEN and ADMIN_CHAT_ID
        self.bot_token = TELEGRAM_BOT_TOKEN  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        self.chat_id = ADMIN_CHAT_ID
        
        if not self.enabled:
            logger.warning("Admin notifications disabled or not configured")
        elif self.enabled:
            logger.info(f"Admin notifications enabled, chat_id: {ADMIN_CHAT_ID}")
    
    async def send_notification(self, 
                              level: AlertLevel,
                              title: str,
                              message: str,
                              user_info: Optional[Dict[str, Any]] = None,
                              error_details: Optional[Dict[str, Any]] = None,
                              suggested_actions: Optional[list] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message: –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            error_details: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            suggested_actions: –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.enabled:
            logger.debug("Admin notifications disabled")
            return False
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_text = self._format_notification(
                level, title, message, user_info, error_details, suggested_actions
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram API
            success = await self._send_telegram_message(notification_text)
            
            if success:
                logger.info(f"Admin notification sent: {title}")
            else:
                logger.error(f"Failed to send admin notification: {title}")
                
            return success
            
        except Exception as e:
            logger.error(f"Error sending admin notification: {e}")
            return False
    
    def _format_notification(self,
                           level: AlertLevel,
                           title: str,
                           message: str,
                           user_info: Optional[Dict[str, Any]],
                           error_details: Optional[Dict[str, Any]],
                           suggested_actions: Optional[list]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ —É—Ä–æ–≤–Ω—è
        text = f"{level.value} <b>{title}</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{message}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if user_info:
            text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
            text += f"   ‚Ä¢ ID: <code>{user_info.get('telegram_id', 'N/A')}</code>\n"
            text += f"   ‚Ä¢ –ò–º—è: {user_info.get('first_name', 'N/A')}\n"
            text += f"   ‚Ä¢ Username: @{user_info.get('username', 'N/A')}\n"
            text += f"   ‚Ä¢ –ù–∏—à–∞: {user_info.get('niche', 'N/A')}\n"
            text += f"   ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {user_info.get('state', 'N/A')}\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        if error_details:
            text += f"üîç <b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:</b>\n"
            for key, value in error_details.items():
                text += f"   ‚Ä¢ {key}: <code>{value}</code>\n"
            text += "\n"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if suggested_actions:
            text += f"üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            for i, action in enumerate(suggested_actions, 1):
                text += f"   {i}. {action}\n"
            text += "\n"
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        text += f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        
        return text
    
    async def _send_telegram_message(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
        
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            payload = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None, 
                lambda: requests.post(url, json=payload, timeout=10)
            )
            
            if response.status_code == 200:
                return True
            else:
                logger.error(f"Telegram API error: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"Error sending telegram message: {e}")
            return False
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    
    async def notify_user_error(self,
                              error_type: str,
                              error_message: str,
                              user_info: Dict[str, Any],
                              traceback_info: Optional[str] = None) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        error_details = {
            "–¢–∏–ø –æ—à–∏–±–∫–∏": error_type,
            "–°–æ–æ–±—â–µ–Ω–∏–µ": error_message[:200] + "..." if len(error_message) > 200 else error_message
        }
        
        if traceback_info:
            error_details["Traceback"] = traceback_info[:300] + "..." if len(traceback_info) > 300 else traceback_info
        
        suggested_actions = [
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤",
            "–û–±–Ω–æ–≤–∏—Ç—å FAQ –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
        ]
        
        return await self.send_notification(
            level=AlertLevel.ERROR,
            title="–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞",
            user_info=user_info,
            error_details=error_details,
            suggested_actions=suggested_actions
        )
    
    async def notify_n8n_timeout(self,
                                webhook_type: str,
                                user_info: Dict[str, Any],
                                timeout_duration: int,
                                request_data: Optional[Dict[str, Any]] = None) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ N8N"""
        
        error_details = {
            "–¢–∏–ø –≤–µ–±—Ö—É–∫–∞": webhook_type,
            "–¢–∞–π–º–∞—É—Ç (—Å–µ–∫)": str(timeout_duration),
            "URL": self._get_webhook_url(webhook_type)
        }
        
        if request_data:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
            if webhook_type == "niche":
                error_details["–û–ø–∏—Å–∞–Ω–∏–µ"] = request_data.get('description', 'N/A')[:100]
            elif webhook_type == "topic":
                error_details["–¢–µ–º–∞"] = request_data.get('topic', 'N/A')[:100]
                error_details["–ù–∏—à–∞"] = request_data.get('niche', 'N/A')
            elif webhook_type == "post":
                error_details["–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"] = request_data.get('user_answer', 'N/A')[:100]
        
        suggested_actions = [
            f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å N8N —Å–µ—Ä–≤–µ—Ä–∞",
            f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {webhook_type} workflow",
            "–£–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ",
            "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ OpenAI API"
        ]
        
        return await self.send_notification(
            level=AlertLevel.WARNING,
            title=f"N8N –¢–∞–π–º–∞—É—Ç: {webhook_type}",
            message=f"N8N –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ {timeout_duration} —Å–µ–∫—É–Ω–¥",
            user_info=user_info,
            error_details=error_details,
            suggested_actions=suggested_actions
        )
    
    async def notify_n8n_error(self,
                              webhook_type: str,
                              error_code: int,
                              error_message: str,
                              user_info: Dict[str, Any]) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ N8N"""
        
        error_details = {
            "–¢–∏–ø –≤–µ–±—Ö—É–∫–∞": webhook_type,
            "HTTP –∫–æ–¥": str(error_code),
            "–û—à–∏–±–∫–∞": error_message[:200],
            "URL": self._get_webhook_url(webhook_type)
        }
        
        suggested_actions = [
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å N8N —Å–µ—Ä–≤–µ—Ä–∞",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å workflow –Ω–∞ –æ—à–∏–±–∫–∏",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI API",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–ø—Ç–æ–≤"
        ]
        
        return await self.send_notification(
            level=AlertLevel.ERROR,
            title=f"N8N –û—à–∏–±–∫–∞: {webhook_type}",
            message=f"N8N –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {error_code}",
            user_info=user_info,
            error_details=error_details,
            suggested_actions=suggested_actions
        )
    
    async def notify_database_error(self,
                                  operation: str,
                                  error_message: str,
                                  user_info: Optional[Dict[str, Any]] = None) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ë–î"""
        
        error_details = {
            "–û–ø–µ—Ä–∞—Ü–∏—è": operation,
            "–û—à–∏–±–∫–∞": error_message[:300]
        }
        
        suggested_actions = [
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Supabase",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SQL –∑–∞–ø—Ä–æ—Å–æ–≤",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏"
        ]
        
        return await self.send_notification(
            level=AlertLevel.CRITICAL,
            title="–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            message="–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
            user_info=user_info,
            error_details=error_details,
            suggested_actions=suggested_actions
        )
    
    async def notify_rate_limit(self,
                              service: str,
                              user_info: Dict[str, Any]) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤"""
        
        error_details = {
            "–°–µ—Ä–≤–∏—Å": service,
            "–í—Ä–µ–º—è": datetime.now().strftime('%H:%M:%S')
        }
        
        suggested_actions = [
            f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã {service}",
            "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ rate limiting",
            "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤"
        ]
        
        return await self.send_notification(
            level=AlertLevel.WARNING,
            title=f"Rate Limit: {service}",
            message=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ {service}",
            user_info=user_info,
            error_details=error_details,
            suggested_actions=suggested_actions
        )
    
    async def notify_system_info(self,
                               title: str,
                               message: str,
                               details: Optional[Dict[str, Any]] = None) -> bool:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        
        return await self.send_notification(
            level=AlertLevel.INFO,
            title=title,
            message=message,
            error_details=details
        )
    
    def _get_webhook_url(self, webhook_type: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç URL –≤–µ–±—Ö—É–∫–∞ –ø–æ —Ç–∏–ø—É"""
        from config import N8N_NICHE_WEBHOOK_URL, N8N_TOPIC_WEBHOOK_URL, N8N_POST_WEBHOOK_URL
        
        urls = {
            "niche": N8N_NICHE_WEBHOOK_URL or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            "topic": N8N_TOPIC_WEBHOOK_URL or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            "post": N8N_POST_WEBHOOK_URL or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        }
        
        return urls.get(webhook_type, "Unknown")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
admin_notifier = AdminNotifier()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
async def notify_user_error(error_type: str, error_message: str, user_info: Dict[str, Any], traceback_info: Optional[str] = None):
    """–ë—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await admin_notifier.notify_user_error(error_type, error_message, user_info, traceback_info)

async def notify_n8n_timeout(webhook_type: str, user_info: Dict[str, Any], timeout_duration: int, request_data: Optional[Dict[str, Any]] = None):
    """–ë—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ N8N"""
    return await admin_notifier.notify_n8n_timeout(webhook_type, user_info, timeout_duration, request_data)

async def notify_n8n_error(webhook_type: str, error_code: int, error_message: str, user_info: Dict[str, Any]):
    """–ë—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ N8N"""
    return await admin_notifier.notify_n8n_error(webhook_type, error_code, error_message, user_info)

async def notify_database_error(operation: str, error_message: str, user_info: Optional[Dict[str, Any]] = None):
    """–ë—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ë–î"""
    return await admin_notifier.notify_database_error(operation, error_message, user_info)

async def notify_system_info(title: str, message: str, details: Optional[Dict[str, Any]] = None):
    """–ë—ã—Å—Ç—Ä–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    return await admin_notifier.notify_system_info(title, message, details)
