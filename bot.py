# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∏—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import logging
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# –ò–º–ø–æ—Ä—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from config import (
    TELEGRAM_BOT_TOKEN, 
    BotStates, 
    NICHE_CONFIRMATION_KEYBOARD,
    MAIN_MENU_KEYBOARD,
    PROFILE_KEYBOARD,
    MAX_USERS,
    LOG_LEVEL,
    LOG_FORMAT,
    ADMIN_CHAT_ID
)
from database import db
from utils import email_validator, voice_processor, niche_detector, retry_helper, text_formatter
from error_handler import (
    telegram_error_handler, 
    rate_limit_handler, 
    global_rate_limiter,
    BotErrorHandler
)
from post_system import post_system, N8NTimeoutError, N8NConnectionError
import messages

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format=LOG_FORMAT,
    level=getattr(logging, LOG_LEVEL)
)
logger = logging.getLogger(__name__)

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("profile", self.profile_command))
        self.app.add_handler(CommandHandler("test_reminder", self.test_reminder_command))
        self.app.add_handler(CommandHandler("send_daily_reminders", self.send_daily_reminders_command))
        self.app.add_handler(CommandHandler("clear_test_day", self.clear_test_day_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.app.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–û –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞!)
        self.app.add_handler(MessageHandler(
            filters.Regex("^üë§ –ü—Ä–æ—Ñ–∏–ª—å$"),
            self.profile_command
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(
            filters.VOICE, 
            self.handle_voice_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π)
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_text_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)
    
    @rate_limit_handler(global_rate_limiter)
    @telegram_error_handler
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            telegram_id = user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_count = await retry_helper.retry_async_operation(
                lambda: db.get_users_count()
            )
            
            if users_count >= MAX_USERS:
                await update.message.reply_text(
                    "<b>‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = await retry_helper.retry_async_operation(
                lambda: db.get_user_by_telegram_id(telegram_id)
            )
            
            if existing_user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                if existing_user['state'] == BotStates.REGISTERED:
                    await self.show_main_menu(update, context)
                else:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    await self.continue_registration(update, context, existing_user)
            else:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                await update.message.reply_text(
                    messages.WELCOME_MESSAGE,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            raise  # –ü–æ–∑–≤–æ–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
    
    @telegram_error_handler
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = update.effective_user
        telegram_id = user.id
        
        help_text = """
<b>ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üìß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ email –∞–¥—Ä–µ—Å—É
‚Ä¢ üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –Ω–∏—à–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ ‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ—Å—Ç–∞—Ö
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
        if str(telegram_id) == ADMIN_CHAT_ID:
            help_text += """
<b>üîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /test_reminder - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–±–µ
‚Ä¢ /send_daily_reminders - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ /send_daily_reminders 5 - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è (1-31) [–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï]
‚Ä¢ /clear_test_day - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é)
"""
        
        help_text += """
<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user = update.effective_user
            telegram_id = user.id
            text = update.message.text.strip()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user = await retry_helper.retry_async_operation(
                lambda: db.get_user_by_telegram_id(telegram_id)
            )
            
            if not current_user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–∞—á–∏–Ω–∞–µ–º —Å email
                await self.handle_email_input(update, context, text)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                state = current_user.get('state', BotStates.WAITING_EMAIL)
                
                if state == BotStates.WAITING_EMAIL:
                    await self.handle_email_input(update, context, text)
                elif state == BotStates.WAITING_NICHE_DESCRIPTION:
                    await self.handle_niche_description(update, context, text)
                elif state == BotStates.WAITING_POST_ANSWER:
                    await self.handle_post_answer(update, context, text)
                elif state == BotStates.REGISTERED:
                    await self.handle_registered_user_message(update, context, text)
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await self.show_main_menu(update, context)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
            await update.message.reply_text(
                messages.ERROR_GENERAL,
                parse_mode='HTML'
            )
    
    async def handle_email_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
        try:
            user = update.effective_user
            telegram_id = user.id
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ —Ç–µ–∫—Å—Ç–∞
            email = email_validator.extract_email_from_text(text)
            
            if not email:
                # Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ
                await update.message.reply_text(
                    messages.INVALID_EMAIL.format(
                        input_text=text_formatter.escape_html(text[:50])
                    ),
                    parse_mode='HTML'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
            if not email_validator.is_valid_email(email):
                await update.message.reply_text(
                    messages.INVALID_EMAIL.format(
                        input_text=text_formatter.escape_html(text[:50])
                    ),
                    parse_mode='HTML'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            email_exists = await retry_helper.retry_async_operation(
                lambda: db.check_email_exists(email)
            )
            
            if not email_exists:
                await update.message.reply_text(
                    messages.EMAIL_NOT_FOUND.format(
                        email=text_formatter.escape_html(email)
                    ),
                    parse_mode='HTML'
                )
                return
            
            # Email –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_user = await retry_helper.retry_async_operation(
                lambda: db.get_user_by_telegram_id(telegram_id)
            )
            
            if not existing_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await retry_helper.retry_async_operation(
                    lambda: db.create_user(
                        telegram_id=telegram_id,
                        email=email,
                        username=user.username,
                        first_name=user.first_name,
                        last_name=user.last_name
                    )
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await retry_helper.retry_async_operation(
                    lambda: db.update_user_state(telegram_id, BotStates.WAITING_NICHE_DESCRIPTION)
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –ø—Ä–æ—Å–∏–º –æ–ø–∏—Å–∞—Ç—å –Ω–∏—à—É
            await update.message.reply_text(
                messages.EMAIL_SUCCESS.format(
                    email=text_formatter.escape_html(email)
                ),
                parse_mode='HTML'
            )
            
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            
            await update.message.reply_text(
                messages.NICHE_REQUEST,
                parse_mode='HTML'
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_email_input: {e}")
            await update.message.reply_text(
                messages.ERROR_DATABASE,
                parse_mode='HTML'
            )
    
    async def handle_niche_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∏—à–∏"""
        try:
            user = update.effective_user
            telegram_id = user.id
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞
            processing_message = await update.message.reply_text(
                messages.NICHE_PROCESSING,
                parse_mode='HTML'
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏—à—É —á–µ—Ä–µ–∑ N8N webhook
            niche = await niche_detector.detect_niche(text)
            
            if not niche:
                # –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∏—à–∏
                await processing_message.edit_text(
                    messages.ERROR_N8N_WEBHOOK,
                    parse_mode='HTML'
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –Ω–∏—à—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['temp_niche'] = niche
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(messages.BUTTON_CORRECT, callback_data='niche_correct'),
                    InlineKeyboardButton(messages.BUTTON_TRY_AGAIN, callback_data='niche_retry')
                ]
            ])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await processing_message.edit_text(
                messages.NICHE_RESULT.format(
                    niche=text_formatter.escape_html(niche)
                ),
                parse_mode='HTML',
                reply_markup=keyboard
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_niche_description: {e}")
            await update.message.reply_text(
                messages.ERROR_N8N_WEBHOOK,
                parse_mode='HTML'
            )
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user = update.effective_user
            telegram_id = user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user = await retry_helper.retry_async_operation(
                lambda: db.get_user_by_telegram_id(telegram_id)
            )
            
            state = current_user.get('state') if current_user else None
            
            if state not in [BotStates.WAITING_NICHE_DESCRIPTION, BotStates.WAITING_POST_ANSWER]:
                await update.message.reply_text(
                    "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –ø—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–∏—à–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ—Å—Ç–∞.",
                    parse_mode='HTML'
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text(
                "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                parse_mode='HTML'
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            voice_file = await update.message.voice.get_file()
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            transcribed_text = await voice_processor.transcribe_voice_message(voice_file)
            
            if not transcribed_text:
                await processing_message.edit_text(
                    messages.ERROR_VOICE_TRANSCRIPTION,
                    parse_mode='HTML'
                )
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            await processing_message.delete()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if state == BotStates.WAITING_NICHE_DESCRIPTION:
                await self.handle_niche_description(update, context, transcribed_text)
            elif state == BotStates.WAITING_POST_ANSWER:
                await self.handle_post_answer(update, context, transcribed_text)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_voice_message: {e}")
            await update.message.reply_text(
                messages.ERROR_VOICE_TRANSCRIPTION,
                parse_mode='HTML'
            )
    
    async def _safe_answer_callback_query(self, query):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ timeout"""
        try:
            await query.answer()
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ callback query (timeout, duplicate, etc.)
            logger.debug(f"Callback query answer failed (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ): {e}")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            
            # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
            await self._safe_answer_callback_query(query)
            
            user = query.from_user
            telegram_id = user.id
            data = query.data
            
            if data == 'niche_correct':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∏—à—É
                temp_niche = context.user_data.get('temp_niche')
                
                if temp_niche:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏—à—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await retry_helper.retry_async_operation(
                        lambda: db.update_user_niche(telegram_id, temp_niche)
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await retry_helper.retry_async_operation(
                        lambda: db.update_user_state(telegram_id, BotStates.REGISTERED)
                    )
                    
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    context.user_data.clear()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                    await query.edit_message_text(
                        messages.NICHE_SAVED.format(
                            niche=text_formatter.escape_html(temp_niche)
                        ),
                        parse_mode='HTML'
                    )
                    
                    await asyncio.sleep(1)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
                    await query.message.reply_text(
                        messages.REMINDER_SETUP,
                        parse_mode='HTML'
                    )
                    
                    await asyncio.sleep(1)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    keyboard = ReplyKeyboardMarkup(
                        MAIN_MENU_KEYBOARD,
                        resize_keyboard=True,
                        one_time_keyboard=False
                    )
                    
                    # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º inline keyboard –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await query.message.edit_reply_markup(reply_markup=None)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await query.bot.send_message(
                        chat_id=query.message.chat_id,
                        text="üéØ",  # –ü—Ä–æ—Å—Ç–æ —ç–º–æ–¥–∑–∏
                        reply_markup=keyboard
                    )
                
            elif data == 'niche_retry':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                await query.edit_message_text(
                    messages.NICHE_RETRY,
                    parse_mode='HTML'
                )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                context.user_data.pop('temp_niche', None)
            
            elif data == 'change_niche':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏—à—É
                await retry_helper.retry_async_operation(
                    lambda: db.update_user_state(telegram_id, BotStates.WAITING_NICHE_DESCRIPTION)
                )
                
                await query.edit_message_text(
                    messages.NICHE_REQUEST,
                    parse_mode='HTML'
                )
            
            elif data == 'suggest_topic':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–º—ã
                await self.handle_suggest_topic(query, context)
            
            elif data == 'write_post':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç
                await self.handle_write_post_request(query, context)
            
            elif data == 'regenerate_post':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
                await self.handle_regenerate_post(query, context)
            
            elif data.startswith('goal_'):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –ø–æ—Å—Ç–∞
                await self.handle_goal_selection(query, context, data)
            
# –£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ new_topic - —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
        
        except Exception as e:
            error_message = str(e).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "message is not modified"
            if "message is not modified" in error_message:
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout –æ—à–∏–±–∫–∏ callback query
            if any(phrase in error_message for phrase in [
                "query is too old", 
                "response timeout expired", 
                "query id is invalid"
            ]):
                logger.debug(f"Callback query timeout (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º): {e}")
                return
            
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
            try:
                await query.message.reply_text(
                    messages.ERROR_GENERAL,
                    parse_mode='HTML'
                )
            except Exception:
                # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = update.effective_user
            telegram_id = user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user = await retry_helper.retry_async_operation(
                lambda: db.get_user_by_telegram_id(telegram_id)
            )
            
            if not current_user:
                await update.message.reply_text(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    parse_mode='HTML'
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ—Å—Ç–æ–≤
            limit_info = await retry_helper.retry_async_operation(
                lambda: db.check_user_post_limit(telegram_id)
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            reg_date = current_user.get('registration_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if reg_date and reg_date != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                try:
                    parsed_date = datetime.fromisoformat(reg_date.replace('Z', '+00:00'))
                    reg_date = parsed_date.strftime('%d.%m.%Y')
                except:
                    reg_date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(messages.BUTTON_CHANGE_NICHE, callback_data='change_niche')]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
            profile_text = messages.PROFILE_INFO.format(
                email=text_formatter.escape_html(current_user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')),
                niche=text_formatter.escape_html(current_user.get('niche', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')),
                registration_date=reg_date,
                posts_generated=limit_info.get('posts_generated', 0),
                posts_limit=limit_info.get('posts_limit', 10),
                remaining_posts=limit_info.get('remaining_posts', 10)
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            main_keyboard = ReplyKeyboardMarkup(
                MAIN_MENU_KEYBOARD,
                resize_keyboard=True,
                one_time_keyboard=False
            )
            
            await update.message.reply_text(
                profile_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ profile_command: {e}")
            await update.message.reply_text(
                messages.ERROR_DATABASE,
                parse_mode='HTML'
            )
    
    async def test_reminder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            user = update.effective_user
            telegram_id = user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
            if str(telegram_id) != ADMIN_CHAT_ID:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    parse_mode='HTML'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            current_user = await retry_helper.retry_async_operation(
                lambda: db.get_user_by_telegram_id(telegram_id)
            )
            
            if not current_user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    parse_mode='HTML'
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏—à—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            niche = current_user.get('niche', '–í–∞—à–∞ –Ω–∏—à–∞')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_text = messages.DAILY_REMINDER.format(
                niche=text_formatter.escape_html(niche)
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–ª–æ–∂–∏ –º–Ω–µ —Ç–µ–º—É"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "üí° –ü—Ä–µ–¥–ª–æ–∂–∏ –º–Ω–µ —Ç–µ–º—É", 
                    callback_data='suggest_topic'
                )]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await update.message.reply_text(
                f"üß™ <b>–¢–ï–°–¢–û–í–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï</b>\n\n{reminder_text}",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ test_reminder_command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
                parse_mode='HTML'
            )
    
    async def send_daily_reminders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        /send_daily_reminders - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        /send_daily_reminders 5 - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 5-–≥–æ –¥–Ω—è
        """
        try:
            user = update.effective_user
            telegram_id = user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
            if str(telegram_id) != ADMIN_CHAT_ID:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    parse_mode='HTML'
                )
                return
            
            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            specific_day = None
            if context.args:
                try:
                    day_arg = int(context.args[0])
                    if 1 <= day_arg <= 31:
                        specific_day = day_arg
                    else:
                        await update.message.reply_text(
                            "‚ùå –ù–æ–º–µ—Ä –¥–Ω—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31.\n\n"
                            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                            "‚Ä¢ <code>/send_daily_reminders</code> - —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å\n"
                            "‚Ä¢ <code>/send_daily_reminders 5</code> - 5-–π –¥–µ–Ω—å",
                            parse_mode='HTML'
                        )
                        return
                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –¥–Ω—è.\n\n"
                        "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                        "‚Ä¢ <code>/send_daily_reminders</code> - —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å\n"
                        "‚Ä¢ <code>/send_daily_reminders 5</code> - 5-–π –¥–µ–Ω—å",
                        parse_mode='HTML'
                    )
                    return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if specific_day:
                status_text = f"üîÑ <b>–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –¥–Ω—è {specific_day}...</b>\n\n"
            else:
                status_text = "üîÑ <b>–ó–∞–ø—É—Å–∫–∞—é —Ä—É—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...</b>\n\n"
            
            status_message = await update.message.reply_text(
                status_text + "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                parse_mode='HTML'
            )
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
            if specific_day:
                await retry_helper.retry_async_operation(
                    lambda: db.set_active_reminder_day(specific_day)
                )
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–≥–æ –ª–æ–≥–∏–∫–∏
            from scheduler import scheduler
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –ø–æ–º–æ—â—å—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            await scheduler.send_daily_reminders(specific_day=specific_day)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if specific_day:
                success_text = f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –¥–Ω—è {specific_day} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            else:
                success_text = "‚úÖ <b>–†—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            
            await status_message.edit_text(
                success_text + "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
                parse_mode='HTML'
            )
            
            logger.info(f"–ê–¥–º–∏–Ω {telegram_id} –∑–∞–ø—É—Å—Ç–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π" + 
                       (f" –¥–ª—è –¥–Ω—è {specific_day}" if specific_day else ""))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_reminders_command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                parse_mode='HTML'
            )
    
    async def clear_test_day_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–Ω—è (–≤–æ–∑–≤—Ä–∞—Ç –∫ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é)"""
        try:
            user = update.effective_user
            telegram_id = user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
            if str(telegram_id) != ADMIN_CHAT_ID:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    parse_mode='HTML'
                )
                return
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å
            success = await retry_helper.retry_async_operation(
                lambda: db.clear_active_reminder_day()
            )
            
            if success:
                await update.message.reply_text(
                    "‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å –æ—á–∏—â–µ–Ω!</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å —Ç–µ–º—ã –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è.",
                    parse_mode='HTML'
                )
                logger.info(f"–ê–¥–º–∏–Ω {telegram_id} –æ—á–∏—Å—Ç–∏–ª —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å")
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–Ω—è.",
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ clear_test_day_command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–Ω—è.",
                parse_mode='HTML'
            )
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = ReplyKeyboardMarkup(
            MAIN_MENU_KEYBOARD,
            resize_keyboard=True,
            one_time_keyboard=False
        )
        
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ.",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    

    async def continue_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict):
        """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        state = user_data.get('state', BotStates.WAITING_EMAIL)
        
        if state == BotStates.WAITING_EMAIL:
            await update.message.reply_text(
                messages.WELCOME_MESSAGE,
                parse_mode='HTML'
            )
        elif state == BotStates.WAITING_NICHE_DESCRIPTION:
            await update.message.reply_text(
                messages.NICHE_REQUEST,
                parse_mode='HTML'
            )
        else:
            await self.show_main_menu(update, context)
    
    async def handle_registered_user_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.show_main_menu(update, context)
    
    async def handle_suggest_topic(self, query_or_update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–º—ã"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (CallbackQuery –∏–ª–∏ Update)
            if hasattr(query_or_update, 'from_user'):
                # –≠—Ç–æ CallbackQuery
                user = query_or_update.from_user
                message = query_or_update.message
                is_callback = True
            else:
                # –≠—Ç–æ Update
                user = query_or_update.effective_user
                message = query_or_update.effective_message
                is_callback = False
            
            telegram_id = user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user = await retry_helper.retry_async_operation(
                lambda: db.get_user_by_telegram_id(telegram_id)
            )
            
            if not current_user:
                error_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                if is_callback:
                    await query_or_update.edit_message_text(error_text, parse_mode='HTML')
                else:
                    await message.reply_text(error_text, parse_mode='HTML')
                return
            
            niche = current_user.get('niche')
            if not niche:
                error_text = "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É –Ω–∏—à—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
                if is_callback:
                    await query_or_update.edit_message_text(error_text, parse_mode='HTML')
                else:
                    await message.reply_text(error_text, parse_mode='HTML')
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            if is_callback:
                await query_or_update.edit_message_text(
                    messages.SUGGEST_TOPIC_PROCESSING,
                    parse_mode='HTML'
                )
            else:
                processing_message = await message.reply_text(
                    messages.SUGGEST_TOPIC_PROCESSING,
                    parse_mode='HTML'
                )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–µ–º—ã
            success, response_text, content_data = await post_system.process_topic_request(telegram_id, niche)
            
            if success and content_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.user_data['current_content'] = content_data
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç"
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton(messages.BUTTON_WRITE_POST, callback_data='write_post')]
                ])
                
                if is_callback:
                    await query_or_update.edit_message_text(
                        response_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
                else:
                    await processing_message.edit_text(
                        response_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                # –û—à–∏–±–∫–∞, –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                # –ü—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞
                keyboard = None
                if "–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è" in response_text or "–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç" in response_text:
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data='suggest_topic')]
                    ])
                
                if is_callback:
                    await query_or_update.edit_message_text(
                        response_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
                else:
                    await processing_message.edit_text(
                        response_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
        
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "message is not modified"
            if "message is not modified" in str(e).lower():
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
                return
            
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_suggest_topic: {e}")
            error_text = messages.ERROR_GENERAL
            if hasattr(query_or_update, 'edit_message_text'):
                await query_or_update.edit_message_text(error_text, parse_mode='HTML')
            else:
                await query_or_update.effective_message.reply_text(error_text, parse_mode='HTML')
    
    async def handle_write_post_request(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
        try:
            user = query.from_user
            telegram_id = user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            content_data = context.user_data.get('current_content')
            if not content_data:
                await query.edit_message_text(
                    "–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.",
                    parse_mode='HTML'
                )
                return
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
            await retry_helper.retry_async_operation(
                lambda: db.update_user_state(telegram_id, BotStates.WAITING_POST_GOAL)
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –ø–æ—Å—Ç–∞
            goal_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–†–µ–∞–∫—Ü–∏–∏", callback_data='goal_reactions')],
                [InlineKeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data='goal_comments')],
                [InlineKeyboardButton("–†–µ–ø–æ—Å—Ç—ã", callback_data='goal_reposts')],
                [InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°", callback_data='goal_dm')]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ü–µ–ª–∏
            goal_text = messages.POST_GOAL_SELECTION.format(
                topic=text_formatter.escape_html(content_data.get('adapted_topic', content_data.get('topic')))
            )
            
            await query.edit_message_text(
                goal_text,
                parse_mode='HTML',
                reply_markup=goal_keyboard
            )
        
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "message is not modified"
            if "message is not modified" in str(e).lower():
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
                return
            
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_write_post_request: {e}")
            await query.edit_message_text(
                messages.ERROR_GENERAL,
                parse_mode='HTML'
            )
    
    async def handle_goal_selection(self, query, context: ContextTypes.DEFAULT_TYPE, goal_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –ø–æ—Å—Ç–∞"""
        try:
            user = query.from_user
            telegram_id = user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            content_data = context.user_data.get('current_content')
            if not content_data:
                await query.edit_message_text(
                    "–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.",
                    parse_mode='HTML'
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data
            goal_mapping = {
                'goal_reactions': '–†–µ–∞–∫—Ü–∏–∏',
                'goal_comments': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', 
                'goal_reposts': '–†–µ–ø–æ—Å—Ç—ã',
                'goal_dm': '–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°'
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –¥–ª—è N8N webhook
            goal_descriptions = {
                'goal_reactions': '—á—Ç–æ–±—ã –ø–æ—Å—Ç –≤—ã–∑–≤–∞–ª —É —á–µ–ª–æ–≤–µ–∫–∞ —ç–º–æ—Ü–∏—é –∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é (—Å–µ—Ä–¥—Ü–µ, –æ–≥–æ–Ω—å –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)',
                'goal_comments': '—á—Ç–æ–±—ã –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —É —á–µ–ª–æ–≤–µ–∫–∞ –±—ã–ª–æ –∂–µ–ª–∞–Ω–∏–µ –æ–±—Å—É–¥–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä—É –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ó–∞–¥–∞—á–∞ —Å–æ–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
                'goal_reposts': '—á—Ç–æ–±—ã –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –ø–æ—Å—Ç–∞ —É —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ—è–≤–∏–ª–æ—Å—å –∂–µ–ª–∞–Ω–∏–µ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤–∞–∂–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é –¥–ª—è –Ω–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                'goal_dm': '—á—Ç–æ–±—ã –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –ø–æ—Å—Ç–∞ —É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ—è–≤–∏–ª—Å—è –∏–Ω—Ç–µ—Ä–µ—Å –∫ —É—Å–ª—É–≥–∞–º –∞–≤—Ç–æ—Ä–∞. –ó–∞–¥–∞—á–∞ ‚Äî —Å–æ–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
            }
            
            post_goal = goal_mapping.get(goal_data, '–†–µ–∞–∫—Ü–∏–∏')
            post_goal_description = goal_descriptions.get(goal_data, goal_descriptions['goal_reactions'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['post_goal'] = post_goal
            context.user_data['post_goal_description'] = post_goal_description
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            await retry_helper.retry_async_operation(
                lambda: db.update_user_state(telegram_id, BotStates.WAITING_POST_ANSWER)
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–µ–ª–∏
            question_text = messages.POST_QUESTION.format(
                topic=text_formatter.escape_html(content_data.get('adapted_topic', content_data.get('topic'))),
                goal=text_formatter.escape_html(post_goal),
                question=text_formatter.escape_html(content_data.get('question', ''))
            )
            
            await query.edit_message_text(
                question_text,
                parse_mode='HTML'
            )
        
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "message is not modified"
            if "message is not modified" in str(e).lower():
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
                return
            
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_goal_selection: {e}")
            await query.edit_message_text(
                messages.ERROR_GENERAL,
                parse_mode='HTML'
            )
    
    async def handle_post_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ—Å—Ç–∞"""
        try:
            user = update.effective_user
            telegram_id = user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            content_data = context.user_data.get('current_content')
            if not content_data:
                await update.message.reply_text(
                    "–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.",
                    parse_mode='HTML'
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user = await retry_helper.retry_async_operation(
                lambda: db.get_user_by_telegram_id(telegram_id)
            )
            
            if not current_user:
                await update.message.reply_text(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    parse_mode='HTML'
                )
                return
            
            niche = current_user.get('niche')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            processing_message = await update.message.reply_text(
                messages.POST_PROCESSING,
                parse_mode='HTML'
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            post_goal = context.user_data.get('post_goal', '–†–µ–∞–∫—Ü–∏–∏')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–†–µ–∞–∫—Ü–∏–∏"
            post_goal_description = context.user_data.get('post_goal_description', '—á—Ç–æ–±—ã –ø–æ—Å—Ç –≤—ã–∑–≤–∞–ª —É —á–µ–ª–æ–≤–µ–∫–∞ —ç–º–æ—Ü–∏—é –∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é (—Å–µ—Ä–¥—Ü–µ, –æ–≥–æ–Ω—å –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
            success, response_text = await post_system.process_post_generation(
                telegram_id=telegram_id,
                niche=niche,
                content_data=content_data,
                user_answer=text,
                post_goal=post_goal_description  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            )
            
            if success:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
                await retry_helper.retry_async_operation(
                    lambda: db.update_user_state(telegram_id, BotStates.POST_GENERATED)
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–Ω–æ–≤–æ"
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton(messages.BUTTON_REGENERATE, callback_data='regenerate_post')]
                ])
                
                await processing_message.edit_text(
                    response_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            else:
                # –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                await retry_helper.retry_async_operation(
                    lambda: db.update_user_state(telegram_id, BotStates.WAITING_POST_ANSWER)
                )
                
                # –ü—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞, –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                keyboard = None
                if "–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è" in response_text or "–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç" in response_text:
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data='regenerate_post')]
                    ])
                
                await processing_message.edit_text(
                    response_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_post_answer: {e}")
            await update.message.reply_text(
                messages.ERROR_POST_GENERATION,
                parse_mode='HTML'
            )
    
    async def handle_regenerate_post(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–∞"""
        try:
            user = query.from_user
            telegram_id = user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            content_data = context.user_data.get('current_content')
            if not content_data:
                await query.edit_message_text(
                    "–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.",
                    parse_mode='HTML'
                )
                return
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            await retry_helper.retry_async_operation(
                lambda: db.update_user_state(telegram_id, BotStates.WAITING_POST_ANSWER)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
            limit_info = await retry_helper.retry_async_operation(
                lambda: db.check_user_post_limit(telegram_id)
            )
            remaining_attempts = limit_info.get('remaining_posts', 0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–Ω–æ–≤–æ
            question_text = messages.POST_REGENERATE_QUESTION.format(
                topic=text_formatter.escape_html(content_data.get('adapted_topic', content_data.get('topic'))),
                question=text_formatter.escape_html(content_data.get('question', '')),
                remaining_attempts=remaining_attempts
            )
            
            await query.edit_message_text(
                question_text,
                parse_mode='HTML'
            )
        
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "message is not modified"
            if "message is not modified" in str(e).lower():
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
                return
            
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_regenerate_post: {e}")
            await query.edit_message_text(
                messages.ERROR_GENERAL,
                parse_mode='HTML'
            )
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        if isinstance(update, Update):
            await BotErrorHandler.handle_general_error(update, context, context.error)
        else:
            logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        try:
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            stop_event = asyncio.Event()
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            def signal_handler():
                stop_event.set()
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∏–ª–∏ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                await stop_event.wait()
            except asyncio.CancelledError:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ async run: {e}")
        finally:
            try:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
                if hasattr(self.app, 'updater') and self.app.updater.running:
                    await self.app.updater.stop()
                if hasattr(self.app, '_initialized') and self.app._initialized:
                    await self.app.stop()
                    await self.app.shutdown()
                logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    def run_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ executor"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞...")
            if hasattr(self.app, 'updater') and self.app.updater.running:
                await self.app.updater.stop()
            if hasattr(self.app, '_initialized') and self.app._initialized:
                await self.app.stop()
                await self.app.shutdown()
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    def set_stop_event(self, stop_event):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.stop_event = stop_event

# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    bot = TelegramBot()
    asyncio.run(bot.run())
