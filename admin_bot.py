# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import logging
import asyncio
from typing import Optional
from telegram import Bot
from telegram.error import TelegramError

from config import ADMIN_BOT_TOKEN, ADMIN_CHAT_ID, ENABLE_ADMIN_NOTIFICATIONS

logger = logging.getLogger(__name__)

class AdminNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.admin_bot = None
        if ADMIN_BOT_TOKEN and ENABLE_ADMIN_NOTIFICATIONS:
            self.admin_bot = Bot(token=ADMIN_BOT_TOKEN)
        
    async def send_notification(self, message: str, parse_mode: str = 'HTML') -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        
        Args:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode (str): –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML –∏–ª–∏ Markdown)
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.admin_bot or not ADMIN_CHAT_ID or not ENABLE_ADMIN_NOTIFICATIONS:
            logger.debug("–ê–¥–º–∏–Ω—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
            
        try:
            await self.admin_bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=message,
                parse_mode=parse_mode
            )
            logger.debug("–ê–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def notify_n8n_error(self, webhook_type: str, error_code: int, error_details: str, 
                               user_info: Optional[dict] = None) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ N8N
        
        Args:
            webhook_type (str): –¢–∏–ø webhook (niche, topic, post)
            error_code (int): HTTP –∫–æ–¥ –æ—à–∏–±–∫–∏
            error_details (str): –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            user_info (dict, optional): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        from datetime import datetime
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        message = f"""
üî¥ <b>N8N –û—à–∏–±–∫–∞: {webhook_type}</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
N8N –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {error_code}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
"""
        
        if user_info:
            message += f"""   ‚Ä¢ ID: {user_info.get('telegram_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
   ‚Ä¢ –ò–º—è: {user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
   ‚Ä¢ Username: @{user_info.get('username', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}
   ‚Ä¢ –ù–∏—à–∞: {user_info.get('niche', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}
"""
        else:
            message += "   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
        
        message += f"""
üîç <b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:</b>
   ‚Ä¢ –¢–∏–ø webhook: {webhook_type}
   ‚Ä¢ HTTP –∫–æ–¥: {error_code}
   ‚Ä¢ –û—à–∏–±–∫–∞: {error_details}

üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
"""
        
        return await self.send_notification(message)
    
    async def notify_system_error(self, error_type: str, error_message: str, 
                                  additional_info: Optional[str] = None) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ
        
        Args:
            error_type (str): –¢–∏–ø –æ—à–∏–±–∫–∏
            error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ  
            additional_info (str, optional): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        from datetime import datetime
        
        message = f"""
‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {error_type}</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{error_message}
"""
        
        if additional_info:
            message += f"\nüîç <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n{additional_info}"
        
        message += f"\n\nüïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        
        return await self.send_notification(message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
admin_notifier = AdminNotifier()
